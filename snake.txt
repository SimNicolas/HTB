slither = aa + db + nn + ef + rr + gh + lr + ty

aa = '\x61'
db = '\x6e'
nn = '\x61'
ef = '\x63'
rr = '\x6f'
gh = '\x6e'
lr = '\x64'
ty = '\x61'

hex characters to ascii - converted as string becomes anaconda
(confirmed that it works but we don't know the password)

chains = this is a troll
keys = password!!
password = its not that easy
auth = keep trying

lock_pick = random.randint(0, 1000)
lock = lock_pick * 2
lock = lock + 10
lock = lock / 2
lock = lock - lock_pick

lock_pick is number given ******

for key in keys:
	keys_encrypt = lock ^ key
	chars.append(keys_encrypt)
	
#what is keys_encrypt and whats in chars (just print it)
	
	
for chain in chains:
	chains_encrypt = chain + 0xA
	chars.append(chains_encrypt)
	
#print what is chains_encrypt and whats in chars

htb password wouldn't work so I played with it and I guess only first 10 count. 
I was checking to see why and I was looking at the information that I was
given that I disregarded before

I'm pretty sure what the maker of this challenge wanted you to know that the 
real password (password!!) is 10 characters and anything longer than that is wrong.
At least that's how I interpreted it, because the forloop at the end makes it
so that anything added after a first correct letter says good job by the break 
statements